
// assets/js/admin.remote.js
(() => {
  const SOCIAL={insta:{key:'instaPosts',title:'Instagram'},fb:{key:'fbPosts',title:'Facebook'},x:{key:'xPosts',title:'X'},tiktok:{key:'tiktokPosts',title:'TikTok'}};
  const TL_KEY='cael.timeline.custom';
  const $$=(s,r=document)=>Array.from(r.querySelectorAll(s)); const $=(s,r=document)=>r.querySelector(s);
  const uid=()=>Date.now().toString(36)+Math.random().toString(36).slice(2,8);
  const DS=window.DataSource; async function aload(k){return DS?await DS.load(k):JSON.parse(localStorage.getItem(k)||'[]')} async function asave(k,v){return DS?await DS.save(k,v):localStorage.setItem(k,JSON.stringify(v))}
  function migrate(list){(list||[]).forEach(it=>{if(!it.id) it.id=uid();}); return list||[]} function fmt(ts){const d=new Date(ts||Date.now()); return isNaN(+d)?'—':d.toLocaleString('de-DE')}
  function initTabs(){ $$('#tabs .tab').forEach(btn=>{ btn.onclick=async()=>{ $$('#tabs .tab').forEach(b=>b.classList.remove('active')); btn.classList.add('active'); const id=btn.dataset.id; $$('#tabviews > section').forEach(s=>s.hidden=(s.id!==id)); if(id==='tab-events') await renderEvents(); else await renderSocial(id.replace('tab-','')); }; }); }
  async function renderSocial(platform){
    const cfg=SOCIAL[platform]; const sec=document.getElementById('tab-'+platform); if(!sec) return;
    const idEl=$('#f-id',sec), userEl=$('#f-user',sec), avatarEl=$('#f-avatar',sec), imgEl=$('#f-img',sec), textEl=$('#f-text',sec);
    const saveBtn=$('#f-save',sec), exportBtn=$('#f-export',sec), importIn=$('#f-import',sec), label=$('#f-platform',sec), grid=document.getElementById('list-'+platform), status=$('#status',document);
    if(label) label.textContent=cfg.title; idEl.value=''; userEl.value=''; avatarEl.value=''; imgEl.value=''; textEl.value=''; saveBtn.textContent='Speichern';
    async function listData(){ const arr=migrate(await aload(cfg.key)); await asave(cfg.key,arr); return arr; }
    async function draw(){ grid.innerHTML='<p class="meta">Lade…</p>'; const data=(await listData()).slice().sort((a,b)=>(a.time||0)-(b.time||0)).reverse(); grid.innerHTML=''; if(!data.length){ const p=document.createElement('p'); p.className='meta'; p.textContent='Keine Beiträge vorhanden.'; grid.appendChild(p); return; } data.forEach(item=>{ const card=document.createElement('article'); card.className='card admin-row'; card.innerHTML=`<div class="row-main"><img src="${item.img||'assets/avatar.png'}" class="thumb" alt=""><div class="meta-wrap"><div class="row-title">${item.user||'@user'} <span class="meta">• ${fmt(item.time)}</span></div><div class="row-text meta">${(item.text||'').slice(0,140)}</div></div></div><div class="row-actions"><button class="btn btn-sm edit">Bearbeiten</button><button class="btn btn-sm danger del">Löschen</button></div>`; card.querySelector('.edit').onclick=()=>{ idEl.value=item.id; userEl.value=item.user||''; avatarEl.value=item.avatar||''; imgEl.value=item.img||''; textEl.value=item.text||''; saveBtn.textContent='Änderungen speichern'; }; card.querySelector('.del').onclick=async()=>{ if(!confirm('Diesen Beitrag löschen?')) return; const base=(await aload(cfg.key)).filter(p=>p.id!==item.id); await asave(cfg.key,base); await draw(); }; grid.appendChild(card); }); if(status&&DS){ const c=DS.cfg(); status.textContent=`Speicher: ${c.mode==='github'?'GitHub JSON':'Browser (localStorage)'}`; } }
    saveBtn.onclick=async()=>{ const obj={id:idEl.value||uid(),user:userEl.value||'@cael_official',avatar:avatarEl.value||'assets/avatar.png',img:imgEl.value||'',text:textEl.value||'',time:Date.now()}; let arr=await aload(cfg.key); const idx=arr.findIndex(p=>p.id===obj.id); if(idx>=0) arr[idx]=obj; else arr.push(obj); await asave(cfg.key,arr); idEl.value=''; userEl.value=''; avatarEl.value=''; imgEl.value=''; textEl.value=''; saveBtn.textContent='Speichern'; await draw(); };
    exportBtn.onclick=async()=>{ const data=JSON.stringify(await aload(cfg.key),null,2); const blob=new Blob([data],{type:'application/json'}); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download=`${platform}-posts.json`; a.click(); setTimeout(()=>URL.revokeObjectURL(a.href),1000); };
    importIn.onchange=(e)=>{ const file=e.target.files[0]; if(!file) return; const reader=new FileReader(); reader.onload=async()=>{ try{ const incoming=migrate(JSON.parse(reader.result)); let base=await aload(cfg.key); const idxById=new Map(base.map((it,i)=>[it.id,i])); incoming.forEach(n=>{ if(!n.id) n.id=uid(); if(idxById.has(n.id)) base[idxById.get(n.id)]=n; else{ const comp=(n.user||'')+'|'+(n.text||'')+'|'+String(n.time||''); const j=base.findIndex(it=>((it.user||'')+'|'+(it.text||'')+'|'+String(it.time||''))===comp); if(j>=0) base[j]=n; else base.push(n); } }); await asave(cfg.key,base); await draw(); }catch(err){ alert('Import (Merge) fehlgeschlagen: '+err.message); } }; reader.readAsText(file); e.target.value=''; };
    await draw();
  }
  async function renderEvents(){
    const sec=document.getElementById('tab-events'); const idEl=$('#e-id',sec), dateEl=$('#e-date',sec), titleEl=$('#e-title',sec), typeEl=$('#e-type',sec), imgEl=$('#e-img',sec), noteEl=$('#e-note',sec); const saveBtn=$('#e-save',sec), exportBtn=$('#e-export',sec), importIn=$('#e-import',sec), clearBtn=$('#e-clear',sec), grid=document.getElementById('list-events'), status=$('#status',document);
    async function listData(){ const arr=migrate(await aload(TL_KEY)); arr.sort((a,b)=>a.date.localeCompare(b.date)); await asave(TL_KEY,arr); return arr; }
    async function draw(){ grid.innerHTML='<p class="meta">Lade…</p>'; const data=(await listData()).slice().reverse(); grid.innerHTML=''; if(!data.length){ const p=document.createElement('p'); p.className='meta'; p.textContent='Noch keine Custom‑Events.'; grid.appendChild(p); return; } data.forEach(item=>{ const card=document.createElement('article'); card.className='card admin-row'; card.innerHTML=`<div class="row-main"><img src="${item.img||'assets/covers/veins.png'}" class="thumb" alt=""><div class="meta-wrap"><div class="row-title">${item.title} <span class="meta">• ${item.type} • ${item.date}</span></div><div class="row-text meta">${(item.note||'').slice(0,160)}</div></div></div><div class="row-actions"><button class="btn btn-sm edit">Bearbeiten</button><button class="btn btn-sm danger del">Löschen</button></div>`; card.querySelector('.edit').onclick=()=>{ idEl.value=item.id; dateEl.value=item.date; titleEl.value=item.title; typeEl.value=item.type||'Milestone'; imgEl.value=item.img||''; noteEl.value=item.note||''; saveBtn.textContent='Änderungen speichern'; }; card.querySelector('.del').onclick=async()=>{ if(!confirm('Dieses Event löschen?')) return; await asave(TL_KEY,(await aload(TL_KEY)).filter(p=>p.id!==item.id)); await draw(); }; grid.appendChild(card); }); if(status&&window.DataSource){ const c=window.DataSource.cfg(); status.textContent=`Speicher: ${c.mode==='github'?'GitHub JSON':'Browser (localStorage)'}`; } }
    saveBtn.onclick=async()=>{ const obj={id:idEl.value||uid(),date:dateEl.value,title:titleEl.value.trim(),type:typeEl.value,img:imgEl.value.trim(),note:noteEl.value.trim()}; if(!obj.date||!obj.title){ alert('Datum & Titel sind Pflicht.'); return; } let arr=await aload(TL_KEY); const idx=arr.findIndex(e=>e.id===obj.id); if(idx>=0) arr[idx]=obj; else arr.push(obj); await asave(TL_KEY,arr); idEl.value=''; dateEl.value=''; titleEl.value=''; typeEl.value='Milestone'; imgEl.value=''; noteEl.value=''; saveBtn.textContent='Speichern'; await draw(); };
    exportBtn.onclick=async()=>{ const data=JSON.stringify(await aload(TL_KEY),null,2); const blob=new Blob([data],{type:'application/json'}); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='timeline-custom.json'; a.click(); setTimeout(()=>URL.revokeObjectURL(a.href),1000); };
    importIn.onchange=(e)=>{ const file=e.target.files[0]; if(!file) return; const reader=new FileReader(); reader.onload=async()=>{ try{ const incoming=JSON.parse(reader.result); let base=await aload(TL_KEY); const idxById=new Map(base.map((it,i)=>[it.id,i])); incoming.forEach(n=>{ if(!n.id) n.id=uid(); if(idxById.has(n.id)) base[idxById.get(n.id)]=n; else{ const comp=(n.title||'')+'|'+(n.date||'')+'|'+(n.type||''); const j=base.findIndex(it=>((it.title||'')+'|'+(it.date||'')+'|'+(it.type||''))===comp); if(j>=0) base[j]=n; else base.push(n); } }); await asave(TL_KEY,base); await draw(); }catch(err){ alert('Import (Merge) fehlgeschlagen: '+err.message); } }; reader.readAsText(file); e.target.value=''; };
    clearBtn.onclick=async()=>{ if(confirm('Wirklich alle Custom‑Events löschen?')){ localStorage.removeItem(TL_KEY); await draw(); } };
    await draw();
  }
  window.addEventListener('DOMContentLoaded',async()=>{
    initTabs();
    (function(){ const map={insta:'tab-insta',fb:'tab-fb',x:'tab-x',tiktok:'tab-tiktok',events:'tab-events'}; const h=(location.hash||'').replace('#',''); const id=map[h]||'tab-insta'; const btn=Array.from(document.querySelectorAll('#tabs .tab')).find(b=>b.dataset.id===id)||document.querySelector('#tabs .tab'); btn&&btn.click(); })();
    const y=document.getElementById('year'); if(y) y.append(new Date().getFullYear());
  });
})();
